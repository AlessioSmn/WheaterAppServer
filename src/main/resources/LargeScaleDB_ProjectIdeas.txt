// User Role based Actions
User 	- register, login and logout
City    - Search a city by Name
        - Add , Remove city
HourlyMeasurement	- Get historical weather, forecast 7 days, forecast today for a city
                  	- Add historical and forecast 7 days
ExtremeWeather - get extreme weather for a city and cities
                - update exteme weather thresholds and events
Analytics - ....

// Project Cleanup
    - GlobalExceptionHandler in the controller --> Already implemented, in exception folder
        --> Clean up try-catch exception handling in controller after complete implementation of GlobalExceptionHandler
    - UpdateEWEController --> Empty ✅
    - Merge FavoriteCitiesController into User -> User action of adding and removing favorite city
    - StringToEWECategoryConverter --> No references ✅
    - exception --> why custom exceptions? No proper explanation --> possible to incorporate all in GlobalExceptionControllerHandler ?
    - CityInformationApiService --> Redundant, implemented with Open-Meteo Geo-coding ✅
    - MongoInitializer to be used for collection creation in MongoDB ✅
    - Remove CitiesAPITester, mongodb_conncetion_test and redis_connection_test
    - controller verbs matching the REST criteria
    - Implement MapStruct instead of manual mapping?

// ExtremeWeather
    - Extreme Weather Event --> Whats the strategy? --> Explanation of use of model, DTOs, controllers and services
    - Are we calculating extreme weather for historical data or just 7 days forecast?

    <dependency>
        <groupId>org.apache.commons</groupId>
        <artifactId>commons-math3</artifactId>
        <version>3.6.1</version>
    </dependency>
    DescriptiveStatistics stats = new DescriptiveStatistics();
    temperatures.forEach(stats::addValue);
    double tempMinThreshold = stats.getPercentile(5);
    double tempMaxThreshold = stats.getPercentile(95);

    db.hourly_measurements.aggregate([
    {
        $match: {
        time: { $type: "date" }  // Ensure 'time' is a valid ISODate
        }
    },
    {
        $sort: { time: 1 }  // Sort by time in ascending order (earliest first)
    },
    {
        $project: {
        cityId: 1,
        temperature: 1,
        year: { $year: "$time" },
        month: { $month: "$time" }
        }
    },
    {
        $group: {
        _id: { cityId: "$cityId", year: "$year", month: "$month" },
        temperatures: { $push: "$temperature" }
        }
    }])


WHAT IS THE APP TRYING TO ACHIEVE?

WHY SEPARATE CITY AND MEASUREMENT INTO SEPARATE DOCUMENT ?
Split Measurement for daily measurements which would total 7,300 documents per city. If we have 1000 cities we will get 7.3 million documents 
but MongoDB handles large datasets efficiently; even at 100+ million documents, querying remains performant with proper indexing. Each document 
is compact (~5-20 KB per day) → A year’s worth of weather data (365 docs) is only a few MB per city. 

WHY INDEX (city_id, date) ?
fast queries → With proper indexing, retrieving weather for a single city over a month/year takes milliseconds. 
Sharding scales MongoDB horizontally → If data grows beyond a single server’s capacity, MongoDB shards the data across multiple servers.

TO BE RETURNED AS PART OF RESPONSE TO THE USER WHEN PROVIDING WEATHER DATA
{
    "hourly_units": {
        "time": "iso8601",
        "temperature_2m": "°C",
        "rain": "mm",
        "snowfall": "cm",
        "wind_speed_10m": "km/h"
    },
    "timezone": "GMT"
}

FIND CITIES WITHIN X KM RADIUS
Store coordinates as GeoJSON in collection cities and create 2dsphere Index
"location": {
    "type": "Point",
    "coordinates": [-74.0060, 40.7128]  // [longitude, latitude]
}

WHY USE TIME-SERIES COLLECTION HOURLY DATA?
✅ Storage Efficiency & Compression
MongoDB compresses time-series data better than regular collections.

Since weather data is structured and repetitive, compression will be highly effective.

This reduces disk usage compared to a standard collection.

✅ Fast Time-Based Queries
A time-series collection automatically optimizes queries that filter by time, making it efficient to:

Fetch current weather.

Retrieve historical trends.

Run forecasting models based on past data.

If you store 219,000+ records per city (25 years × 365 days × 24 hours), indexing time manually in a normal collection would slow down queries.

✅ Predictive Modeling
Historical weather data is often used in machine learning to predict future weather conditions.

With time-series collections, MongoDB stores recent data in memory, making model training on fresh data much faster.

Potential Challenges & How to Handle Them
📌 1. Large Dataset (25 Years = Millions of Records)
Solution: Use sharding if your dataset grows too large. MongoDB allows you to shard by cityId to distribute data efficiently.

📌 2. Retention Policy for Old Data
Do you need all 25 years stored forever?

If yes, ensure you have adequate storage.

If no, MongoDB can automatically delete older data using TTL (Time-To-Live) indexing or capped collections.

Example: If only last 10 years matter, set TTL to 10 years.

TTL Example (Automatic Expiry for Old Data)

java
Copy
Edit
collection.createIndex(Indexes.ascending("time"), new IndexOptions().expireAfter(3650L, TimeUnit.DAYS));
(Deletes documents older than 10 years automatically.)

📌 3. Query Performance for Large Time Ranges
If querying across large periods (e.g., 10+ years), queries might slow down.

Solution: Index cityId + time to speed up long-range queries.

Final Verdict: Should You Use Time-Series Collections?
✔ YES, because:

✅ Efficient storage for large data sets.

✅ Optimized for time-based queries.

✅ Ideal for historical trends & predictions.

✅ Automatic data retention is possible.

🚀 Go for a time-series collection with hourly granularity! Just make sure to plan for sharding, indexing, and TTL policies based on how much historical data you truly need.

FEATURES WITH TIME-SERIES COLLECTION HOURLY DATA
Since you're storing 25 years of hourly weather data in a MongoDB time-series collection, you have a powerful dataset that can enable several useful features for your application. Here are some ideas:

🌤️ Real-Time & Current Weather Features
Current Weather Conditions

Retrieve and display real-time weather updates for any city.

Example:

java
Copy
Edit
collection.find(Filters.eq("cityId", "12345"))
          .sort(Sorts.descending("time"))
          .limit(1);
(Fetches the most recent weather entry for a city.)

Live Weather Alerts & Notifications

Detect extreme weather conditions like heatwaves, storms, or heavy snowfall.

Example: Send alerts when wind speed > 100 km/h.

📈 Historical & Analytical Features
Past Weather Data Lookup

Let users check historical weather conditions for a specific date/time.

Example:

"What was the weather on March 15, 2015, at 3 PM?"

Query:

java
Copy
Edit
collection.find(Filters.and(
    Filters.eq("cityId", "12345"),
    Filters.eq("time", ISODate("2015-03-15T15:00:00Z"))
));
Weather Trends & Climate Change Insights

Analyze long-term climate trends over years.

Compare temperature increase over decades.

Example:

"Average March temperature over the last 10 years."

Yearly & Monthly Averages

Calculate average temperature, rainfall, and snowfall for each month/year.

Useful for:

Climate studies.

Agricultural planning.

Example:

"Average rainfall in June for the last 5 years."

java
Copy
Edit
collection.aggregate(List.of(
    Aggregates.match(Filters.eq("cityId", "12345")),
    Aggregates.project(Projections.fields(
        Projections.computed("year", new Document("$year", "$time")),
        Projections.computed("month", new Document("$month", "$time")),
        Projections.include("rain")
    )),
    Aggregates.group(new Document("year", "$year").append("month", "$month"),
                     Accumulators.avg("avgRainfall", "$rain"))
));
🔮 Predictive & Forecasting Features
Weather Forecasting Using AI

Train a machine learning model using historical weather data.

Predict temperature, rainfall, and wind speeds for future dates.

Example:

"Will it rain next weekend?"

Use MongoDB + Python (Pandas, Scikit-learn, TensorFlow) to predict trends.

Anomaly Detection

Detect unusual temperature spikes or unexpected weather patterns.

Example:

If winter temperatures exceed 30°C, flag it as an anomaly.

📍 Geographic & Mapping Features
Weather Data on Maps

Integrate Google Maps or Leaflet.js to show:

Live weather for different locations.

Historical weather heatmaps (e.g., hottest cities last summer).

Weather-Based Route Planning

Suggest travel routes based on weather conditions.

Example:

If a route has heavy rain/snow, suggest alternative roads.

📅 Smart Scheduling Features
Best Time to Travel or Plan Events

Suggest the best weather conditions for traveling or planning outdoor events.

Example:

"When is the best time to visit Rome with no rain?"

java
Copy
Edit
collection.find(Filters.and(
    Filters.eq("cityId", "Rome"),
    Filters.lt("rain", 2.0)  // Less than 2mm of rain
))
.sort(Sorts.descending("time"));
Seasonal Weather Comparison

Compare weather between years or months.

Example:

"Was February 2024 colder than February 2023?"

🛠️ Additional Advanced Features
User Preferences & Custom Weather Reports

Users can subscribe to weather updates for specific cities.

Get daily/weekly weather summaries via email.

Energy Consumption Forecasting

Predict electricity demand based on weather trends (e.g., A/C usage in hot weather).

Useful for power companies or smart home automation.

Weather API Service for Developers

Expose your weather data via an API.

Other apps can fetch weather trends, forecasts, and analytics.

🔗 Conclusion: What Should You Build First?
🚀 Priority Features
✅ Real-time weather updates
✅ Historical weather search
✅ Weather alerts & notifications
✅ Monthly/Yearly averages & trends

Then, expand into AI forecasting, mapping, and anomaly detection.

💡 With 25 years of data, you can create powerful analytics & forecasting tools! 